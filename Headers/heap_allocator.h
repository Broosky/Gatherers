/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Program Name: Gatherers (C)                                                                                             //
// Author: Jeffrey Bednar                                                                                                  //
// Copyright (c) Illusion Interactive, 2011 - 2025.                                                                        //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _HEAP_ALLOCATOR_H_
#define _HEAP_ALLOCATOR_H_
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "Windows/windows_minified.h"
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Forward declares:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct LOG LOG_T;
typedef struct GLOBALS GLOBALS_T;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Types:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct HEAP_ALLOCATOR_NODE {
    struct HEAP_ALLOCATOR_NODE* p_Next;
} HEAP_ALLOCATOR_NODE_T;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
typedef struct HEAP_ALLOCATOR {
    HEAP_ALLOCATOR_NODE_T* p_FreeList;
    void* vp_Block;
    size_t stBlockSizeRequested;
    size_t stBlockSizeAligned;
    size_t stTotalBlockSizeAligned;
    size_t stCapacity;
    size_t stAllocCount;
    size_t stFreeCount;
    size_t stPeakAllocCount;
} HEAP_ALLOCATOR_T;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Prototypes:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void                __cdecl     HEAP_ALLOCATOR_Zero                             (HEAP_ALLOCATOR_T*);
void                __cdecl     HEAP_ALLOCATOR_ZeroBlock                        (void*, size_t);
HEAP_ALLOCATOR_T*   __cdecl     HEAP_ALLOCATOR_Create                           (size_t, size_t, GLOBALS_T*, LOG_T*);
void*               __cdecl     HEAP_ALLOCATOR_Alloc                            (HEAP_ALLOCATOR_T*, LOG_T*);
void                __cdecl     HEAP_ALLOCATOR_Free                             (HEAP_ALLOCATOR_T*, void*, LOG_T*);
void                __cdecl     HEAP_ALLOCATOR_TrackNodes                       (HEAP_ALLOCATOR_T*);
void                __cdecl     HEAP_ALLOCATOR_Kill                             (HEAP_ALLOCATOR_T**, GLOBALS_T*);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
